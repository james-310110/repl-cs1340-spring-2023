{"version":3,"file":"static/js/main.27666ca5.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","mockedJson.js","index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export var students = [\n    ['Name', 'Age', 'Gender', 'Major', 'GPA'],\n    ['John Doe', '20', 'Male', 'Computer Science', '3.5'],\n    ['Jane Smith', '', 'Female', 'Business', '3.2'],\n    ['David Lee', '21', 'Male', 'Mechanical Engineering', '3.9'],\n    ['Amy Chen', '18', 'Female', 'Biology', '3.7'],\n    ['Michael Johnson', '22', 'Male', 'History', '3.1'],\n    ['Emily Brown', '20', 'Female', 'Psychology', '3.8'],\n    ['', '', '', '', '3.4'],\n    ['Grace Lee', '21', 'Female', 'Chemistry', '3.6'],\n    ['Daniel Park', '18', 'Male', 'English', '3.3'],\n    ['Sophia Lee', '20', 'Female', 'Mathematics', '3.8'],\n];\nexport var burgers = [\n    ['Name', 'Price', 'Calories', 'Toppings', 'Description'],\n    [\n        'Classic Burger',\n        '7.99',\n        '900',\n        'Lettuce Tomato Onion Pickles',\n        'Our signature burger with all the fixings',\n    ],\n    [\n        'Mushroom Swiss Burger',\n        '8.99',\n        '950',\n        'Sauteed Mushrooms Swiss Cheese Lettuce Tomato',\n        'Our classic burger with a twist',\n    ],\n    [\n        'Bacon Cheeseburger',\n        '9.99',\n        '1100',\n        'Bacon Cheddar Cheese Lettuce Tomato Onion',\n        'A hearty burger for bacon lovers',\n    ],\n    [\n        'Veggie Burger',\n        '8.99',\n        '700',\n        'Lettuce Tomato Onion Avocado',\n        'A delicious vegetarian option for burger lovers',\n    ],\n    [\n        'Double Cheeseburger',\n        '10.99',\n        '1300',\n        'Lettuce Tomato Onion Pickles',\n        'A double helping of our classic burger',\n    ],\n];\nexport var cats = [\n    ['Name', 'Age', 'Color', 'Breed', 'Personality'],\n    ['Fluffy', '2', 'White', 'Persian', 'Playful and curious'],\n    ['Mittens', '4', 'Black and White', 'Domestic Shorthair', 'Calm and affectionate'],\n    ['Socks', '1', 'Tabby', 'Maine Coon', 'Energetic and adventurous'],\n    ['Whiskers', '3', 'Calico', 'Ragdoll', 'Gentle and loving'],\n    ['Tiger', '5', 'Orange Tabby', 'Bengal', 'Confident and independent'],\n];\nexport var stars = [\n    ['StarID', 'ProperName', 'X', 'Y', 'Z'],\n    ['0', 'Sol', '0', '0', '0'],\n    ['1', '', '282.43485', '0.00449', '5.36884'],\n    ['2', '', '43.04329', '0.00285', '-15.24144'],\n    ['3', '', '277.11358', '0.02422', '223.27753'],\n    ['3759', '96 G. Psc', '7.26388', '1.55643', '0.68697'],\n    ['70667', 'Proxima Centauri', '-0.47175', '-0.36132', '-1.15037'],\n    ['71454', 'Rigel Kentaurus B', '-0.50359', '-0.42128', '-1.1767'],\n    ['71457', 'Rigel Kentaurus A', '-0.50362', '-0.42139', '-1.17665'],\n    ['87666', \"Barnard's Star\", '-0.01729', '-1.81533', '0.14824'],\n    ['118721', '', '-2.28262', '0.64697', '0.29354'],\n];\n","import * as exampleCSVs from './mockedJson.js';\n/**\n * Global state variables to access and manage states.\n */\nvar currentCsvName;\nvar currentCsvArray;\nvar isCsvSelected;\nvar isVerboseMode;\n/**\n * Global variables to print results in html table and to map filePath to csvArray.\n */\nvar replResults;\nvar pathToCsv;\n/**\n * Script to prepare keypress listeners.\n */\nwindow.onload = function () {\n    initializeGlobalVariables();\n    prepareKeypress();\n};\n/**\n * @description\n * READ THIS BEFORE MOVING FORWARD\n *\n *  Functions are declared by order of hierachy, i.e. the order they are called,\n *  hence dependant functions come before the functions they depend on.\n *  Read from top to bottom as the code moves\n *  from high level functions to low level functions.\n */\nfunction initializeGlobalVariables() {\n    currentCsvName = '';\n    currentCsvArray = new Array();\n    isCsvSelected = false;\n    isVerboseMode = false;\n    replResults = document.getElementById('repl-results');\n    pathToCsv = new Map();\n}\n/**\n * Script to activate keypress listeners.\n */\nfunction prepareKeypress() {\n    var maybeInputs = document.getElementsByClassName('repl-command-box');\n    var maybeInput = maybeInputs.item(0);\n    if (maybeInput == null) {\n        console.log('[Error] Failed to find html repl-command-box element.');\n    }\n    else if (!(maybeInput instanceof HTMLInputElement)) {\n        console.log(\"[Error] Found element \".concat(maybeInput, \", but it wasn't an input\"));\n    }\n    else {\n        maybeInput.addEventListener('keypress', handleKeypress);\n    }\n}\n/**\n * Implements REPL functionalities that takes command from html input and prints results in html table.\n */\nfunction handleKeypress(event) {\n    // skip execution if input command (html input) is empty\n    if (event.key != 'Enter') {\n        return;\n    }\n    // skip execution if unable to access repl-history (html table element)\n    if (replResults == null) {\n        console.log('[Error] Failed to find html table element.');\n        return;\n    }\n    // reads the input command from html input\n    var command = readCommand();\n    // evaluate results based on command types\n    var results = evaluateCommand(command);\n    // print results in repl-hisotry (html table element)\n    printResults(command, results);\n    // reset input command (html input) to empty\n    resetCommand();\n}\n/**\n * Reads the command string from html input.\n *\n * @returns string: the command string to be evaluated\n */\nfunction readCommand() {\n    var command = '';\n    var maybeInput = document\n        .getElementsByClassName('repl-command-box')\n        .item(0);\n    if (maybeInput != null && maybeInput instanceof HTMLInputElement) {\n        command = maybeInput.value;\n    }\n    return command;\n}\n/**\n * Evaluates the command based on commandType and returns the results.\n *\n * @param command\n * @returns string[]: the results array to be printed\n */\nfunction evaluateCommand(command) {\n    // if input command is empty, skip following evaluations and returns empty results\n    if (command == '') {\n        return [];\n    }\n    var results = new Array();\n    var outputPrompt = isVerboseMode ? 'Output: ' : '';\n    var commandTerms = command.split(' ');\n    var commandType = commandTerms[0];\n    switch (commandType) {\n        case 'mode':\n            results = runModeCommand();\n            break;\n        case 'load_file':\n            results = runLoadFileCommand(commandTerms, outputPrompt);\n            break;\n        case 'view':\n            results = runViewCommand(outputPrompt);\n            break;\n        case 'search':\n            results = runSearchCommand(commandTerms, outputPrompt);\n            break;\n        case 'query':\n            results = runQueryCommand(command.slice(6), outputPrompt);\n            break;\n        default:\n            results = getOutputMessage(outputPrompt, '[Error] Command is invalid.');\n            break;\n    }\n    return results;\n}\n/**\n * Prints the results from evaluateCommand().\n *\n * @param command - the command to be printed in verbose mode\n * @param results - the results to be printed in html table,\n *                  consists of messages and or csv rows in html tr format\n */\nfunction printResults(command, results) {\n    if (replResults == null) {\n        console.log('[Error] Failed to find html table element.');\n        return;\n    }\n    if (isVerboseMode) {\n        replResults.innerHTML += \"<tr class='outputMode'><td>Command: \".concat(command, \" </td></tr>\");\n    }\n    // prints the results by appending each tr to repl-history\n    results.forEach(function (row) {\n        if (replResults == null) {\n            console.log('[Error] Failed to find html table element.');\n            return;\n        }\n        replResults.innerHTML += row;\n    });\n}\n/**\n * Resets the input command to empty.\n */\nfunction resetCommand() {\n    var maybeInput = document\n        .getElementsByClassName('repl-command-box')\n        .item(0);\n    if (maybeInput != null && maybeInput instanceof HTMLInputElement) {\n        maybeInput.value = '';\n    }\n}\n/**\n * Runs the mode command.\n *\n * @returns string[]: the mode change message nested in a list\n */\nfunction runModeCommand() {\n    isVerboseMode = !isVerboseMode;\n    var outputPrompt = isVerboseMode ? 'Output: ' : '';\n    var outputMode = isVerboseMode ? 'verbose' : 'brief';\n    return getOutputMessage(outputPrompt, \"Switched to \".concat(outputMode, \" output mode.\"));\n}\n/**\n * Runs the load_file command.\n *\n * @param commandTerms - a list of comm\n * @param outputPrompt\n * @returns string[]: the load_file message or relevant error messages nested in a list\n */\nfunction runLoadFileCommand(commandTerms, outputPrompt) {\n    if (commandTerms.length < 2) {\n        return getOutputMessage(outputPrompt, '[Error] File path not provided.');\n    }\n    var filePath = commandTerms[1];\n    if (!(filePath in exampleCSVs)) {\n        return getOutputMessage(outputPrompt, '[Error] File path is invalid.');\n    }\n    if (!pathToCsv.has(filePath)) {\n        setPathToCsv(filePath);\n    }\n    var newCsvArray = pathToCsv.get(filePath);\n    if (!newCsvArray) {\n        return getOutputMessage(outputPrompt, '[Error] csv is corrupted.');\n    }\n    currentCsvArray = newCsvArray;\n    currentCsvName = filePath;\n    isCsvSelected = true;\n    return getOutputMessage(outputPrompt, \"\".concat(filePath, \" is loaded.\"));\n}\n/**\n * Runs the view command.\n *\n * @param outputPrompt - the ouputPrompt for verbose mode\n * @returns string[]: the view message and the csv array,\n *                    or relevant error messages,\n *                    wrapped in a string array\n */\nfunction runViewCommand(outputPrompt) {\n    if (!isCsvSelected) {\n        return getOutputMessage(outputPrompt, '[Error] No csv is selected.');\n    }\n    var outputMessage = getOutputMessage(outputPrompt, \"\".concat(currentCsvName, \" displayed.\"));\n    var outputArray = getCsvArrayInHtmlTable(currentCsvArray);\n    return outputMessage.concat(outputArray);\n}\n/**\n * Runs the search command.\n *\n * @param commandTerms - the list of command arguments\n * @param outputPrompt - the outputPrompt used for verbose ouput\n * @returns string[]: the sarch message and the result csv rows,\n *                    or relevant error messages,\n *                    wrapped in a string array\n */\nfunction runSearchCommand(commandTerms, outputPrompt) {\n    if (!isCsvSelected) {\n        return getOutputMessage(outputPrompt, '[Error] No csv is selected.');\n    }\n    if (commandTerms.length == 1) {\n        return getOutputMessage(outputPrompt, '[Error] No search term provided.');\n    }\n    if (commandTerms.length > 3) {\n        return getOutputMessage(outputPrompt, '[Error] Too many search terms provided.');\n    }\n    // take care of edge case where column is not provided\n    var columnInput = commandTerms.length == 3 ? commandTerms[1] : 'anyColumn';\n    var value = commandTerms.length == 3 ? commandTerms[2] : commandTerms[1];\n    // determine if column input is name or index\n    var columnInputIsName = isNaN(Number(columnInput));\n    // convert column input to index number\n    var columnIndex = columnInputIsName\n        ? currentCsvArray[0].indexOf(columnInput)\n        : Number(columnInput);\n    // returns error messages and skips following execution if error condition is satisfied.\n    if (columnInputIsName &&\n        columnInput != 'anyColumn' &&\n        !currentCsvArray[0].includes(columnInput)) {\n        return getOutputMessage(outputPrompt, '[Error] Column name not found in header.');\n    }\n    if (!columnInputIsName &&\n        (columnIndex <= -1 || columnIndex >= currentCsvArray[0].length)) {\n        return getOutputMessage(outputPrompt, '[Error] Column index out of bounds.');\n    }\n    var outputRows = searchCsv(value, columnIndex);\n    if (outputRows.length == 0) {\n        return getOutputMessage(outputPrompt, 'Results not found.');\n    }\n    var outputMessage = getOutputMessage(outputPrompt, \"\".concat(outputRows.length, \" \").concat(outputRows.length == 1 ? 'row' : 'rows', \" found in \").concat(currentCsvName, \".\"));\n    return outputMessage.concat(getCsvArrayInHtmlTable(outputRows));\n}\n/**\n * Runs the query command. [Mocking] [hard-coded]\n *\n * @param query - the query arguments to be parsed and recursively searched\n * @param outputPrompt - the outputPrompt used for verbose ouput\n * @returns string[]: the query message and the result csv rows,\n *                    or relevant error messages,\n *                    wrapped in a string array\n */\nfunction runQueryCommand(query, outputPrompt) {\n    if (!isCsvSelected) {\n        return getOutputMessage(outputPrompt, '[Error] No csv is selected.');\n    }\n    var exampleQuery = \"AND('Lettuce, Tomato, Onion, Pickles' in 'Toppings', '900' in Calories')\";\n    if (currentCsvName == 'burgers' && query == exampleQuery) {\n        // hard-coded ouput message\n        var outputMessage = getOutputMessage(outputPrompt, '1 row found in burgers.');\n        // hard-coded output rows\n        var outputRows = [exampleCSVs.burgers[1]];\n        return outputMessage.concat(getCsvArrayInHtmlTable(outputRows));\n    }\n    var errorMessages = new Array();\n    errorMessages.push(getOutputMessage(outputPrompt, '[Error] This query command is not supported in mocking.')[0]);\n    // suggests hard-coded command prompts for mocking and testing.\n    errorMessages.push(getOutputMessage('', 'Try the following commands instead')[0]);\n    errorMessages.push(getOutputMessage('', \"load_file burgers\")[0]);\n    errorMessages.push(getOutputMessage('', \"query \".concat(query))[0]);\n    return errorMessages;\n}\n/**\n * Maps new filepath to csvArray. [Mocking] [hard-coded]\n *\n * @param filePath - used as the key in pathToCsv map\n */\nfunction setPathToCsv(filePath) {\n    switch (filePath) {\n        case 'students':\n            pathToCsv.set(filePath, exampleCSVs.students);\n            break;\n        case 'burgers':\n            pathToCsv.set(filePath, exampleCSVs.burgers);\n            break;\n        case 'cats':\n            pathToCsv.set(filePath, exampleCSVs.cats);\n            break;\n        case 'stars':\n            pathToCsv.set(filePath, exampleCSVs.stars);\n            break;\n    }\n}\n/**\n * Converts the intputArray from 2d string array to a 1d string array of html tr.\n *\n * @param inputArray - the array to be converted\n * @returns string[]: the input array in a list of html tr\n */\nfunction getCsvArrayInHtmlTable(inputArray) {\n    var htmlTableRows = new Array();\n    var numRows = inputArray.length;\n    if (numRows == 0) {\n        return htmlTableRows;\n    }\n    var numCols = inputArray[0].length;\n    for (var r = 0; r < numRows; r++) {\n        var row = '';\n        for (var c = 0; c < numCols; c++) {\n            row += \"<td>\".concat(inputArray[r][c], \"</td>\");\n        }\n        htmlTableRows.push(\"<tr class='userData'>\" + row + '</tr>');\n    }\n    return htmlTableRows;\n}\n/**\n * Searches the target value in currentCsvArray.\n *\n * @param value - the target value to be searched\n * @param columnIndex - the column index to be searched\n *                      -1 if searching all columns\n * @returns string[][]: a list of qualified rows\n */\nfunction searchCsv(value, columnIndex) {\n    var rows = new Array();\n    if (columnIndex == -1) {\n        // searching in all columns\n        for (var r = 0; r < currentCsvArray.length; r++) {\n            if (currentCsvArray[r].includes(value)) {\n                rows.push(currentCsvArray[r]);\n            }\n        }\n    }\n    else {\n        // searching in designated column\n        for (var r = 0; r < currentCsvArray.length; r++) {\n            if (currentCsvArray[r][columnIndex] == value) {\n                rows.push(currentCsvArray[r]);\n            }\n        }\n    }\n    return rows;\n}\n/**\n * Gets the output message in html tr format.\n *\n * @param prompt - the prompt of the message\n * @param content - the content of the message\n * @returns string[]: the outputMessage nested in a string array\n */\nfunction getOutputMessage(prompt, content) {\n    return [\"<tr class='message'><td>\".concat(prompt).concat(content, \"</td></tr>\")];\n}\n/**\n * Resets the command and results.\n */\nfunction clearHistory() {\n    var commandBox = document\n        .getElementsByClassName('repl-command-box')\n        .item(0);\n    if (commandBox != null && commandBox instanceof HTMLInputElement) {\n        commandBox.value = '';\n    }\n    var resultsTable = document.getElementById('repl-results');\n    if (resultsTable != null && resultsTable instanceof HTMLElement) {\n        resultsTable.innerHTML = '';\n    }\n    // initializeGlobalVariables()\n}\nexport { pathToCsv, isVerboseMode, isCsvSelected, currentCsvName, currentCsvArray, prepareKeypress, handleKeypress, readCommand, evaluateCommand, printResults, resetCommand, runModeCommand, runLoadFileCommand, runViewCommand, runSearchCommand, runQueryCommand, setPathToCsv, getCsvArrayInHtmlTable, searchCsv, getOutputMessage, clearHistory, initializeGlobalVariables, };\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","currentCsvName","currentCsvArray","isCsvSelected","isVerboseMode","replResults","pathToCsv","students","burgers","cats","stars","handleKeypress","event","command","maybeInput","document","getElementsByClassName","item","HTMLInputElement","readCommand","results","Array","outputPrompt","commandTerms","split","getOutputMessage","concat","runModeCommand","length","filePath","exampleCSVs","has","set","setPathToCsv","newCsvArray","runLoadFileCommand","outputMessage","outputArray","getCsvArrayInHtmlTable","runViewCommand","columnInput","columnInputIsName","isNaN","Number","columnIndex","indexOf","includes","outputRows","rows","r","push","searchCsv","runSearchCommand","query","exampleQuery","errorMessages","runQueryCommand","slice","evaluateCommand","console","log","innerHTML","forEach","row","printResults","resetCommand","inputArray","htmlTableRows","numRows","numCols","c","prompt","content","window","onload","getElementById","Map","addEventListener","prepareKeypress"],"sourceRoot":""}